{"ts":1373374475257,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Created with JetBrains WebStorm.\n * User: a.demarchi\n * Date: 17/04/13\n * Time: 14.55\n * To change this template use File | Settings | File Templates.\n *\n */\napp.views.training = Backbone.View.extend({\n\n    /** init view **/\n    initialize: function(options) {\n        console.log('initializing training view');\n        this.load();\n    },\n\n    /** click event for start training **/\n    events: {\n        'click #btnStart':      'training_start',\n        'click #btnEnd':        'training_end'\n    },\n\n    /** load user data and create training **/\n    load: function() {\n\n        var activity_id = this.options.opt;\n\n        /** reset global var **/\n        app.global.training_active = false;\n        app.global.different_latlon = true;\n        app.global.i_emulation = 0;\n\n        app.global.index = 0;\n        app.global.secondi_totali = 0;\n        app.global.minuti_totali = 0;\n        app.global.tempo_str = '00:00:00';\n\n        app.global.total_distance_str = '0';\n        app.global.total_distance_km = 0;\n        app.global.total_distance_m = 0;\n        app.global.distance_two_point_km = 0;\n\n        app.global.velocita_istantanea_ms = 0;\n        app.global.somma_velocita_istantanea_ms = 0;\n        app.global.velocita_media_ms = 0;\n\n        app.global.velocita_istantanea_kmh = 0;\n        app.global.velocita_media_kmh = 0;\n\n        app.global.calorie = 0;\n        app.global.gr_persi = 0;\n\n        app.global.trainingModel = new app.models.training({\n            \"username\" :  app.global.usersCollection.first().get(\"username\"),\n            \"activity_id\" : activity_id,\n            \"events\": [],\n            \"loc\": {\n                \"type\" : \"LineString\",\n                \"coordinates\" : []\n            }\n        });\n    },\n\n    /** render template **/\n    render: function() {\n        $(this.el).html(this.template());\n        navigator.geolocation.getCurrentPosition(this.refreshUI, this.noLocation);\n        return this;\n    },\n\n    /** start training **/\n    training_start: function() {\n        var that = this;\n        if (app.global.training_active) {\n            app.global.training_active = false;\n            $(\"#btnStart\").html('riprendi');\n\n            app.global.trainingModel.set(\"end_date\", new Date());\n            clearInterval(app.global.timer);\n        }\n        else    {\n            app.global.training_active = true;\n            $(\"#btnStart\").html('ferma');\n\n            if (app.global.trainingModel.get(\"start_date\") == \"\") {\n                app.global.trainingModel.set(\"start_date\", new Date());\n            }\n\n            if (app.const.debug) {\n                $.getJSON(app.const.testJsonUrl, this.emulation);\n            }\n            else\n            {\n                app.global.timer = setInterval(function() {\n                    //navigator.geolocation.getCurrentPosition(app.views.training.prototype.refreshUI, app.views.training.prototype.noLocation);\n                    navigator.geolocation.getCurrentPosition(that.refreshUI, that.noLocation);\n                }, app.global.speed_timer);\n            }\n        }\n    },\n\n    /** end training **/\n    training_end: function() {\n        if (app.global.training_active) {\n            app.global.training_active = false;\n\n            app.global.trainingModel.set(\"end_date\", new Date());\n            clearInterval(app.global.timer);\n        }\n\n        if (app.global.trainingModel.get(\"events\").length > 1) {\n            //app.global.trainingsCollection = new app.collections.trainings([app.global.trainingModel]);\n            app.global.trainingsCollection.add([app.global.trainingModel]);\n            app.global.trainingModel.save();\n\n            app.routers.router.prototype.send();\n        }\n        else {\n            app.global.trainingModel = null;\n            app.routers.router.prototype.dashboard();\n        }\n    },\n\n    /** gps refresh **/\n    refreshUI: function(event) {\n\n        if (!(typeof event === 'undefined'))       {\n\n            app.global.i_emulation ++;\n            \n            /** first event **/\n            if (app.global.index==0)    {\n                \n                /** set lat/lon to json obj **/\n                var pos = [];\n                pos.push(event.coords.longitude);\n                pos.push(event.coords.latitude);\n                app.global.trainingModel.get(\"loc\").coordinates.push(pos);\n                app.global.trainingModel.get(\"events\").push(event);\n                \n            }    \n            else {\n            \n                /** verify current and previous lat/lon coordinates **/\n                app.global.different_latlon = app.views.training.prototype.is_different_lat_lon(\n                        event.coords.latitude,\n                        event.coords.longitude,\n                        app.global.trainingModel.get(\"events\")[app.global.trainingModel.get(\"events\").length - 1].coords.latitude,\n                        app.global.trainingModel.get(\"events\")[app.global.trainingModel.get(\"events\").length - 1].coords.longitude);\n                \n                /** add event only if current and previous lat/lon are different - fix mongodb spatial error **/\n                if (app.global.different_latlon) {\n    \n                    /** set lat/lon to json obj **/\n                    var pos = [];\n                    pos.push(event.coords.longitude);\n                    pos.push(event.coords.latitude);\n                    app.global.trainingModel.get(\"loc\").coordinates.push(pos);\n                    app.global.trainingModel.get(\"events\").push(event);\n                    \n                    app.global.distance_two_point_km = app.views.training.prototype.getDistanceFromLatLonInKm(  app.global.trainingModel.get(\"events\")[app.global.trainingModel.get(\"events\").length - 2].coords.latitude,\n                        app.global.trainingModel.get(\"events\")[app.global.trainingModel.get(\"events\").length - 2].coords.longitude,\n                        app.global.trainingModel.get(\"events\")[app.global.trainingModel.get(\"events\").length - 1].coords.latitude,\n                        app.global.trainingModel.get(\"events\")[app.global.trainingModel.get(\"events\").length - 1].coords.longitude\n                    );      // in km\n    \n                    app.global.total_distance_km = app.global.total_distance_km + app.global.distance_two_point_km;\n                    app.global.total_distance_km = Math.round(app.global.total_distance_km * 1000) / 1000;\n                    app.global.total_distance_m  = app.global.total_distance_km * 1000;\n                    app.global.total_distance_str = app.global.total_distance_km.toString().replace('.', ',');\n                    \n                }\n                \n                /** training variables **/\n                app.global.secondi_totali = app.global.secondi_totali + app.global.speed_timer/1000;\n                app.global.tempo_str = app.views.training.prototype.get_elapsed_time_string(app.global.secondi_totali);\n                app.global.minuti_totali = Math.floor(app.global.secondi_totali / 60);\n\n                /*  \n                //CALORIE = ORE * PESO * MET\n                calorie =  Math.round ((minuti_totali / 60) * user.attributes.story_weight[user.attributes.story_weight.length - 1].weight * training.attributes.activity_value);\n                gr_persi = Math.round (calorie/8);\n                */\n\n                app.global.velocita_istantanea_ms = Math.round(event.coords.speed);                 //velocit√† del gps in m/s\n                app.global.somma_velocita_istantanea_ms = app.global.somma_velocita_istantanea_ms + app.global.velocita_istantanea_ms;\n                app.global.velocita_media_ms = Math.round( app.global.somma_velocita_istantanea_ms / app.global.index );\n\n                app.global.velocita_istantanea_kmh = Math.round(event.coords.speed * 3.6);      //moltiplico per 3.6 per sapere i Km/h\n                app.global.velocita_media_kmh = Math.round(app.global.velocita_media_ms * 3.6);\n\n                //CALORIE = PESO * KM\n                app.global.calorie =  Math.round ( app.global.usersCollection.first().get(\"story_weight\")[ app.global.usersCollection.first().get(\"story_weight\").length - 1].weight * app.global.total_distance_km);\n                app.global.gr_persi = Math.round(( app.global.calorie / 2 ) / 9);\n        \n            }\n\n            app.global.index++;\n\n            /** training values to model **/\n            app.global.trainingModel.set(\"total_event\",  app.global.index);\n            app.global.trainingModel.set(\"total_meters\", app.global.total_distance_m);\n            app.global.trainingModel.set(\"speed_average_ms\", app.global.velocita_media_ms);\n            app.global.trainingModel.set(\"speed_average_kmh\", app.global.velocita_media_kmh);\n            app.global.trainingModel.set(\"duration_sec\", app.global.secondi_totali);\n            app.global.trainingModel.set(\"duration_min\", app.global.minuti_totali);\n            app.global.trainingModel.set(\"duration_str\", app.global.tempo_str);\n            app.global.trainingModel.set(\"burned_calories\", app.global.calorie);\n            app.global.trainingModel.set(\"lose_gr\", app.global.gr_persi);\n\n            /** refresh training values **/\n            $(\"#durata\").text(app.global.tempo_str);\n            $(\"#distanza_percorsa\").text(app.global.total_distance_str);\n            $(\"#velms\").text(app.global.velocita_istantanea_ms);\n            $(\"#velkmh\").text(app.global.velocita_istantanea_kmh);\n            $(\"#velmediams\").text(app.global.velocita_media_ms);\n            $(\"#velmediakmh\").text(app.global.velocita_media_kmh);\n            $(\"#cal\").text(app.global.calorie);\n            $(\"#gr\").text(app.global.gr_persi);\n        }\n    },\n\n    /** no gps location **/\n    noLocation: function(error)\t{\n        switch(error.code) {\n            case error.PERMISSION_DENIED:\n                alert(\"User denied the request for Geolocation\");\n                break;\n            case error.POSITION_UNAVAILABLE:\n                alert(\"Location information is unavailable.\");\n                break;\n            case error.TIMEOUT:\n                alert(\"The request to get user location timed out.\");\n                break;\n            case error.UNKNOWN_ERROR:\n                alert(\"An unknown error occurred.\");\n                break;\n        }\n    },\n\n    /** emulate training **/\n    emulation: function(event) {\n\n        app.global.timer = setInterval(function() {\n            (app.global.i_emulation < event.event.length) ? app.views.training.prototype.refreshUI(event.event[app.global.i_emulation]) : clearInterval(app.global.timer);\n        }, app.global.speed_timer);\n\n    },\n\n    /** second to string 00:00:00 **/\n    get_elapsed_time_string: function(total_seconds) {\n        function pretty_time_string(num) {\n            return ( num < 10 ? \"0\" : \"\" ) + num;\n        }\n\n        var hours = Math.floor(total_seconds / 3600);\n        total_seconds = total_seconds % 3600;\n\n        var minutes = Math.floor(total_seconds / 60);\n        total_seconds = total_seconds % 60;\n\n        var seconds = Math.floor(total_seconds);\n\n        // Pad the minutes and seconds with leading zeros, if required\n        hours = pretty_time_string(hours);\n        minutes = pretty_time_string(minutes);\n        seconds = pretty_time_string(seconds);\n\n        // Compose the string for display\n        var currentTimeString = hours + \":\" + minutes + \":\" + seconds;\n\n        return currentTimeString;\n    },\n\n    /** calculate distance between two point **/\n    getDistanceFromLatLonInKm: function(lat1,lon1,lat2,lon2) {\n        var R = 6371; // Radius of the earth in km\n        var dLat = this.deg2rad(lat2-lat1);  // deg2rad below\n        var dLon = this.deg2rad(lon2-lon1);\n        var a =\n                Math.sin(dLat/2) * Math.sin(dLat/2) +\n                    Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) *\n                        Math.sin(dLon/2) * Math.sin(dLon/2)\n            ;\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n        var d = R * c; // Distance in km\n        return d;\n    },\n\n    deg2rad: function(deg) {\n        return deg * (Math.PI/180)\n    },\n\n    /** return true if current and prev coords are different **/\n    is_different_lat_lon: function(cur_lat, cur_lon, prev_lat, prev_lon) {\n        return ((cur_lat != prev_lat) && (cur_lon != prev_lon));\n    },\n\n    destroy_view: function() {\n        this.undelegateEvents();\n        $(this.el).removeData().unbind();\n        this.remove();\n        Backbone.View.prototype.remove.call(this);\n        app.global.trainingView = null;\n    }\n});\n\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":12603}]],"length":12603}
